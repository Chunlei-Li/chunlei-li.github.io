p := 2; Fp := GF(p);
n := 4;
printf "n=%o\n", n;
//print funciton
printAR := procedure(as_array)
    printf "-----\n";
    for key in Keys(as_array) do
        printf "%2o:%o\n", key, as_array[key];
    end for;
end procedure;
// Generate all permutations
perm_list := Setseq(Permutations({1 .. n}));
total := #perm_list;
id_perm := [i: i in [1 .. n]];
pos := Position(perm_list, id_perm);
if pos gt 1 then
    perm_list := [ id_perm ] cat perm_list[1 .. pos-1] cat perm_list[pos+1 .. total];
end if;
//print(perm_list[1]);

// generate Matrix from permutation
genMatrix := function(p)
    n := #p;
    A := Matrix(GF(2), n, n, [<p[i], p[i+1], 1> : i in [1 .. n-1] ] cat [<p[i+1], p[i], 1> : i in [1 .. n-1]]);
    return A;
end function;
invPermutation := function(p)
    n := #p;
    inv_p := [1 .. n];
    for i in [1 .. n] do
        inv_p[p[i]] := i;
    end for;
    return inv_p;
end function;
revPermutation := function(p)
    n := #p;
    return [p[(n+1)-i]: i in [1..n]];
end function;
compPermutation := function(p1, p2)
    n := #p1;
    return [p1[p2[i]]: i in [1 .. n]];
end function;
combinePerm := function(p)
    extPerm := function(perm_set)
        perm_set1 := perm_set;
        for perm in perm_set do
            Include(~perm_set1, invPermutation(perm));
            Include(~perm_set1, revPermutation(perm));
        end for;
        return perm_set1;
    end function;
    perm_set0 := {p};
    perm_set1:= extPerm(perm_set0); 
    while #perm_set1 gt # perm_set0 do
        perm_set0 := perm_set1;
        perm_set1 := extPerm(perm_set0);
    end while;
    return perm_set1;
end function;




// Given a set of permutations { p1, ..., pN } where each permutation pi satisfies the condition with identity permutation
// the function generate the final set of permutations where any two satisfy the condition 
genTargetSet := function(perm_set) 
    perm_seq := Setseq(perm_set);
    n     := #perm_seq[1]; // assuming all permutations have same size n
    id_perm    := [i: i in [1 .. n]];
    pos := Position(perm_seq, id_perm);
    if pos eq 0 then
        Insert(~perm_seq, 1, id_perm);
    elif pos gt 1 then
        tmp := perm_seq[1];
        perm_seq[1] := perm_seq[pos];
        perm_seq[pos] := tmp;
    end if;
    N := #perm_seq; 
    //printf "=========\n%o\n", perm_seq;
    perm2int := AssociativeArray();
    int2perm := AssociativeArray();
    for i in [1 .. N] do
        perm2int[perm_seq[i] ] := i; 
        int2perm[i] := perm_seq[i];
    end for;
    S := AssociativeArray(); 
    S[1] := {i : i in [2 .. N] };
    for i in [2 .. N] do
        S[ i ] := { };
        perm := int2perm[i]; 
        for perm1 in perm_seq do
            cond := compPermutation(invPermutation(perm), perm1) in [perm_seq[i] : i in [2 .. N]];
            if cond then
                Include(~S[i], perm2int[perm1]);
            end if;
        end for;
    end for;
    //printAR(S);
    T := AssociativeArray();
    for j in S[1] do
        tmp := S[1] meet S[j];
        if #tmp gt 1 then
            T[ {1, j} ] :=  tmp;
        end if;
    end for;
    //printAR(T);

    iterative_transform := function(R) 
        complete_set := { };
        R1 := AssociativeArray();
        for kset in Keys(R) do
            vset := R[kset];
            if #vset eq 0 then
                Include(~complete_set, kset);
            else
                for j in vset do
                    tmp := vset meet S[j];
                    new_kset := kset join {j};
                    if #tmp eq 0 then
                        Include(~complete_set, new_kset);
                    else
                        R1[ new_kset ] :=  tmp;
                    end if;
                end for;
            end if;
        end for;
        return complete_set, R1;
    end function;

    res, R1 := iterative_transform(T);
    while #R1 gt 0 do
        //printf "size = %o\n", #R1;
        R := R1;
        res1, R1 := iterative_transform(R);
        res := res join res1;
    end while;
    res_perm := { };
    for int_set in res do
        Include(~res_perm, { int2perm[i] : i in int_set });
    end for;
    return res_perm; 
end function;

// Check whether a given permutation p satisfies the condition (p+id) gives a bent function
M0 := genMatrix(perm_list[1]);
filter := function(p, M0)
     n:= #p;
   M1 := genMatrix(p); 
   return Rank(M1-M0) eq n;
end function;

perm_set := { perm_list[1] };
for i in [2 .. total] do
    perm := perm_list[i];
    if filter(perm, M0) then
        Include(~perm_set, perm);
    end if;
end for;
printf "perm_set: \n%o\n", perm_set;
//genTargetSet(perm_set);

//p := Random(perm_set);
//printf "permutation: %o\n", p;
//printf "extended permutations: \n%o\n", combinePerm(p);


//Extending permutations with dimension from n-2 to n+2

extPermutation := function(p)
     n := #p + 2;
    id := [1 .. n+2];
    M0 := genMatrix(id);
    set_perm := {};
    p1 := [n+2, n-1] cat p cat [n+1, n];
    p2 := [n-1, n+1, n+2, n] cat p;
    p3 := [n, n+2, n+1, n-1] cat p;
    p4 := [n+1, n, n+2, n-1] cat p;
    p5 := [n, n-1, n+2, n+1] cat p;
    p6 := p cat [n+1, n+2, n-1, n];
    p7 := [n, n+1, n-1 ,n+2] cat p;
    p8 := [n, n+1, n-1] cat p cat [n+2];
    p9 := [n+1, n, n+2] cat p cat [n-1];
    p10:= [n+1, n+2, n-1] cat p cat [n];
    perm_set := combinePerm(p1) join  combinePerm(p2) join combinePerm(p3) join combinePerm(p4) join combinePerm(p5) join 
                combinePerm(p6) join  combinePerm(p7) join combinePerm(p8) join combinePerm(p9) join combinePerm(p10);
    perm_set1 := {};
    for perm in perm_set do
        Include(~perm_set1, invPermutation(perm));
    end for;
    perm_set2 := {};
    for perm in perm_set do
        Include(~perm_set2, revPermutation(perm));
    end for;
    perm_set3 := {};
    for perm in perm_set do
        Include(~perm_set3, invPermutation(revPermutation(perm)));
    end for;
    perm_set := perm_set join perm_set1 join perm_set2 join perm_set3;
    for perm in set_perm do
        M1 := genMatrix(perm);
        if Rank(M0+M1) ne n+2  then
            printf "Error: %o\n", perm;
        end if;  
    end for;  
    return perm_set;
end function;

File := Open(Sprintf("NOMA-codebook_%o_%o_v2.txt",n, n+4), "w");
res_n4 := genTargetSet(perm_set);
//for perm_set in res_n4 do
fprintf File, "\n=============================================\n\nset for n=%o: %o\n", n, perm_set;
perms := {};
ext_perm_set := {};
for p in perm_set do
    ext_perm_set := ext_perm_set join extPermutation(p);
    res_perms := Setseq(genTargetSet(ext_perm_set));
    Include(~perms, p);
    fprintf File, "\n-------\n";
    fprintf File, "permutations\n%o\n", perms;
    fprintf File, "ext_permutations\n%o\n", ext_perm_set;
    if #res_perms gt 0 then
        size, pos := Maximum([#res_perms[i] : i in [1 .. #res_perms] ]);
        fprintf File, "largest set of permutations\n%o\nsize=%o\n", res_perms[pos], size;
    end if;
    printf "#perm=%o, #ext_perm_set=%o, #res_perms=%o\n", #perm, #ext_perm_set, #res_perms;
end for;

//perm_set := ext_perm_set;
//perms := {};
//ext_perm_set := {};
//for p in perm_set do
    //ext_perm_set := ext_perm_set join extPermutation(p);
    //res_perms := Setseq(genTargetSet(ext_perm_set));
    //Include(~perms, p);
    //fprintf File, "\n-------\n";
    //fprintf File, "permutations\n%o\n", perms;
    ////fprintf File, "ext_permutations\n%o\n", ext_perm_set;
    //if #res_perms gt 0 then
        //size, pos := Maximum([#res_perms[i] : i in [1 .. #res_perms] ]);
        //fprintf File, "largest set of permutations\n%o\nsize=%o\n", res_perms[pos], size;
    //end if;
//end for;

//end for;
delete File;

printf "End of Program!\n";



