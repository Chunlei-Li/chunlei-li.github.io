p := 2;
Fp := GF(p);
n := 8;
genMatrix := function(perm)
    p := perm;
    A := Matrix(GF(2), n, n, [<p[i], p[i+1], 1> : i in [1 .. n-1] ] cat [<p[i+1], p[i], 1> : i in [1 .. n-1]]);
    return A;
end function;

perm_list := Permutations({1 .. n});
//perm_list;

File := Open(Sprintf("NOMA-codebook1_%o.txt",n), "w");
fprintf File, "\n=============================================\n\nn=%o\n", n;

for i in [1 .. 60] do
//p_list := [[1, 2, 3, 4], [2, 1, 4, 3], [1, 3, 4, 2], [3, 1, 2, 4], [1, 4, 2, 3], [4, 1, 3, 2] ];
p_list := [ [1, 2, 3, 4, 5, 6, 7, 8], 
            [2, 1, 4, 3, 6, 5, 8, 7], 
            [1, 3, 4, 2, 5, 7, 8, 6], 
            [3, 1, 2, 4, 7, 5, 6, 8], 
            [1, 4, 2, 3, 5, 8, 6, 7], 
            [4, 1, 3, 2, 8, 5, 7, 6] ];
perm_list_tmp :=  perm_list diff Seqset(p_list);
while #perm_list_tmp gt 0 do
    perm := Random(perm_list_tmp);
    Exclude(~perm_list_tmp, perm);
    //f_tmp := genBoolFunc(perm);
    mat_perm := genMatrix(perm);
    flag := 1;
    for p in p_list do
        //f := genBoolFunc(p);
        mat_p := genMatrix(p);
        //g := f + f_tmp;
        if Rank(mat_perm + mat_p) ne n then
            flag := 0;
            break p;
        end if;
    end for;
    if flag eq 1 then
        Append(~p_list, perm);
    end if;
end while;
printf "i=%o, size=%o\n", i, #p_list;
fprintf File, "Test %o: size=%o\n", i, #p_list;

for p in p_list do
    //printf "%o\n", [p[i]-1 : i in [1 .. n]];
    fprintf File, "%o\n", [p[i]-1 : i in [1 .. n]];
end for;

end for;


